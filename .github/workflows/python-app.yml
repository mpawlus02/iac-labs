# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./example-app
        shell: bash
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install Poetry
      uses: snok/install-poetry@v1
    - name: Install dependencies
      run: |
        poetry install --no-root
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-venv
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
  lint:
    needs: build
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./example-app
        shell: bash
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install Poetry
      uses: snok/install-poetry@v1
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-venv
    - name: Lint
      run: |
        poetry run task lint
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] 
      
  formatter:
    needs: build
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./example-app
        shell: bash
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install Poetry
      uses: snok/install-poetry@v1
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-venv
    - name: formatter
      run: |
        poetry run task formatter
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]   

  security:
    needs: build
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./example-app
        shell: bash
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install Poetry
      uses: snok/install-poetry@v1
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-venv
    - name: security
      run: |
        poetry run task security
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

  pytest:  
    needs: [lint, security, formatter]  
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./example-app
        shell: bash
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install Poetry
      uses: snok/install-poetry@v1
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-venv
    - name: security
      run: |
        poetry run task test      

 
